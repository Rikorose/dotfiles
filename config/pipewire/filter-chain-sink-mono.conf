# Filter-chain config file for PipeWire version "0.3.59" #
#
# This is a base config file for running filters.
#
# Place filter fragments in /etc/pipewire/filter-chain.conf.d/
# for system-wide changes or in ~/.config/pipewire/filter-chain.conf.d/
# for local changes.
#
# Run the filters with pipewire -c filter-chain.conf
#

context.properties = {
    ## Configure properties in the system.
    mem.warn-mlock  = true
    mem.allow-mlock = true
    #mem.mlock-all   = false
    log.level        = 1
}

context.spa-libs = {
    #<factory-name regex> = <library-name>
    #
    # Used to find spa factory names. It maps an spa factory name
    # regular expression to a library name that should contain
    # that factory.
    #
    audio.convert.* = audioconvert/libspa-audioconvert
    support.*       = support/libspa-support
}

context.modules = [
    #{ name = <module-name>
    #    [ args  = { <key> = <value> ... } ]
    #    [ flags = [ [ ifexists ] [ nofail ] ]
    #}
    #
    # Loads a module with the given parameters.
    # If ifexists is given, the module is ignored when it is not found.
    # If nofail is given, module initialization failures are ignored.
    #
    # Uses realtime scheduling to boost the audio thread priorities
    { name = libpipewire-module-rt
        args = {
            rt.prio      = 88
            rt.time.soft = -1
            rt.time.hard = -1
        }
        flags = [ ifexists nofail ]
    }

    # The native communication protocol.
    { name = libpipewire-module-protocol-native }

    # Allows creating nodes that run in the context of the
    # client. Is used by all clients that want to provide
    # data to PipeWire.
    { name = libpipewire-module-client-node }

    # Makes a factory for wrapping nodes in an adapter with a
    # converter and resampler.
    { name = libpipewire-module-adapter }

    # DeepFilter Noise Reduction on a Mono Sink
    { name = libpipewire-module-filter-chain
        args = {
            node.description = "DeepFilter Noise Canceling Mono Sink"
            media.name       = "DeepFilter Noise Canceling Mono Sink"
            filter.graph = {
                nodes = [
                    {
                        name   = mix
                        type   = builtin
                        label  = mixer
                        control = {
                          "Gain 1" = 0.5
                          "Gain 2" = 0.5
                        }
                    }
                    {
                        type   = ladspa
                        name   = "DeepFilterMono"
                        plugin = /home/hendrik/.ladspa/libdeep_filter_ladspa.so
                        label  = deep_filter_mono
                        control = {
                            "Attenuation Limit (dB)" 15
                            "Min processing threshold (dB)" -8
                            "Max ERB processing threshold (dB)" 30
                            "Max DF processing threshold (dB)" 20
                        }
                    }
                    {
                        name   = copyIL
                        type   = builtin
                        label  = copy
                    }
                    {
                        name   = copyOL
                        type   = builtin
                        label  = copy
                    }
                    {
                        name   = copyOR
                        type   = builtin
                        label  = copy
                    }
                ]
                links = [
                    { output = "mix:Out" input = "DeepFilterMono:Audio In" }
                    { output = "DeepFilterMono:Audio Out" input = "copyIL:In" }
                    { output = "copyIL:Out" input = "copyOL:In" }
                    { output = "copyIL:Out" input = "copyOR:In" }
                ]
                inputs  = [ "mix:In 1" "mix:In 2" ]
                outputs = [ "copyOL:Out", "copyOR:Out" ]
            }
            capture.props = {
                node.name         = "mix_input.mix-FL-FR-to-FL"
                audio.position    = [ FL FR ]
                media.class       = "Audio/Sink"
            }
            playback.props = {
                node.name         = "mix_output.mix-FL-FR-to-FL"
                audio.position    = [ FL FR ]
                node.passive      = true
            }
        }
    }
]
