#!/bin/sh

USAGE="Usage: $0 [-h/--hq] [-a/--audio-only] <URL>"
HIST_FILE="$HOME/.cache/ythist"

set -o errexit -o pipefail -o noclobber -o nounset

# -allow a command to fail with !â€™s side effect on errexit
# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
! getopt --test >/dev/null
if [ "${PIPESTATUS[0]}" -ne 4 ]; then
  echo '`getopt --test` failed in this environment.'
  exit 1
fi

OPTS=h,hist,a
LONGOPTS=hq,audio-only
! PARSED=$(getopt --options=$OPTS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [ "${PIPESTATUS[0]}" -ne 0 ]; then
  exit 2
fi
eval set -- "$PARSED"

# Default format is specified in mpv.conf
FORMAT=""
HIST=0
while true; do
  case $1 in
  --hq)
    HEIGHT=$(swaymsg -t get_outputs | jq '.[] | select(.active) | .current_mode.height')
    FORMAT="--ytdl-format='bestvideo[height<=?$HEIGHT,ext!=webm]+bestaudio/best'"
    shift 1
    ;;
  -a | --audio-only)
    FORMAT="--ytdl-format=bestaudio/best"
    shift 1
    ;;
  -h | --hist)
    HIST=1
    shift 1
    ;;
  --)
    shift
    break
    ;;
  *)
    echo "Programming error"
    exit 3
    ;;
  esac
done

# handle non-option arguments
if [ "$HIST" -eq 1 ]; then
  # Use last played
  LINK=$(tail -n 1 "$HIST_FILE")
elif [ $# -lt 1 ]; then
  # Link might be provided via clipboard
  LINK=$(wl-paste -n | tr -d '[:space:]')
else
  LINK=$1
  shift
fi

if ! curl --head --silent --fail "$LINK" >/dev/null 2>&1; then
  if ! [ -f "$(readlink -f "$LINK")" ]; then
    notify-send --category=error "ytplay" "This file or page does not exist."
    exit 4
  fi
fi

notify-send "ytplay" "Start playing $LINK"

echo "$LINK" >>"$HIST_FILE"
TMP="$(mktemp -u)"
tail -n 50 "$HIST_FILE" >"$TMP" && mv "$TMP" "$HIST_FILE"

cmd="mpv --force-window=yes $FORMAT $LINK $* --resume-playback > /tmp/mpv.log 2>&1"
swaymsg exec "\"$cmd\""
